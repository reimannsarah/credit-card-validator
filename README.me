Test:
Code: ccValidate(4102080860435620)
Expected Output:

Decsribe: ccValidate();
Test: "It should turn the inputted number into a array of strings, "
Code: ccValidate(4102080860435620)
Expected Output: ["4","1","0","2","0","8","0","8","6","0","4","3","5","6","2","0"]

Test: "Should turn each string, back into a number!"
Code:ccValidate(4102080860435620)
Expected Output: [4,1,0,2,0,8,0,8,6,0,4,3,5,6,2,0]

Test: "It should, starting on the right and moving left, double every other digit"
Code: ccValidate(4102080860435620)
Expected Output: [4,2,0,4,0,16,0,16,6,0,4,6,5,12,0]

Test: "If any of the returned digits is a double digit, it should add the two separate integers of the double digit together"
Code: ccValidate(4102080860435620)
Expected Output: [4,2,0,4,0,7,0,7,6,0,4,6,5,3,0]

Test: "It should add all the numbers in the array together and return that value"
Code: ccValidate(4102080860435620)
Expected Output: 50;

Test: "If the last number of the sum is 0, it should return a string saying the card is valid"
Code: ccValidate(4102080860435620)
Expected Output: "This card number is valid"

Test: "If the last number of the sum is not 0, it should return a string saying the card is not valid"
Code: ccValidate(4102080880435620)
Expected Output: "This card number is not valid."

Test:
Code: ccValidate(4102080860435620)
Expected Output:

valid numbers:
let v1 = 3402080860432600;
let v2 = 3702080860465630;
let v3 = 4102080880435620;
let v4 = 5102080860435610;
let v5 = 6102080860435600;



invalid numbers:
let iv1 = 3402080860435620;
let iv2 = 3702080860435620;
let iv3 = 4102080880485620;
let iv4 = 5102080860835610;
let iv5 = 6102080860435800;

Ends in 0, but doesn't start with 34, 37, 4, 5, or 6
let iv6 = 7102080860434600;
let iv7 = 8102080860433600;


Starts with 34, 37, 4, 5, or 6 but doesn't end with 0
let iv8 = 6102080860439800;
let iv9 = 3702080860435690;